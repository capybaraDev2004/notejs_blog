const Course = require('../models/Courses.js');
const { normalizeCourse } = require('../utils/courseTransform');

class CourseController {
    // GET /courses - Hi·ªÉn th·ªã danh s√°ch kh√≥a h·ªçc
    async index(req, res) {
        try {
            const { page = 1, limit = 10, search, category, level } = req.query;
            const skip = (page - 1) * limit;
            
            // X√¢y d·ª±ng query filter
            // Kh√¥ng √©p bu·ªôc isActive ƒë·ªÉ l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu c≈© ch∆∞a c√≥ field n√†y
            let filter = {};
            
            if (search) {
                filter.name = { $regex: search, $options: 'i' };
            }
            
            if (category && category !== 'all') {
                filter.category = category;
            }
            
            if (level && level !== 'all') {
                filter.level = level;
            }
            
            // Th·ª±c hi·ªán truy v·∫•n v·ªõi ph√¢n trang
            const rawCourses = await Course.find(filter)
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(parseInt(limit))
                .lean();
            // Chu·∫©n ho√° d·ªØ li·ªáu ƒë·ªÉ ph√π h·ª£p v·ªõi view, h·ªó tr·ª£ c·∫£ data schema c≈©
            const courses = rawCourses.map(normalizeCourse);
            
            // ƒê·∫øm t·ªïng s·ªë kh√≥a h·ªçc
            const total = await Course.countDocuments(filter);
            const totalPages = Math.ceil(total / limit);
            
            res.render('courses/index', {
                courses,
                currentPage: parseInt(page),
                totalPages,
                total,
                search: search || '',
                category: category || 'all',
                level: level || 'all',
                categories: ['programming', 'design', 'business', 'marketing', 'other'],
                levels: ['beginner', 'intermediate', 'advanced']
            });
        } catch (err) {
            console.error('‚ùå L·ªói hi·ªÉn th·ªã danh s√°ch kh√≥a h·ªçc:', err);
            res.status(500).render('error', { 
                message: 'L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu',
                error: err.message 
            });
        }
    }

    // GET /courses/create - Hi·ªÉn th·ªã form t·∫°o kh√≥a h·ªçc
    async create(req, res) {
        try {
            res.render('courses/create', {
                categories: ['programming', 'design', 'business', 'marketing', 'other'],
                levels: ['beginner', 'intermediate', 'advanced']
            });
        } catch (err) {
            console.error('‚ùå L·ªói hi·ªÉn th·ªã form t·∫°o kh√≥a h·ªçc:', err);
            res.status(500).render('error', { 
                message: 'L·ªói hi·ªÉn th·ªã form',
                error: err.message 
            });
        }
    }

    // POST /courses - L∆∞u kh√≥a h·ªçc m·ªõi
    async store(req, res) {
        try {
            const { name, description, price, duration, category, level, instructor } = req.body;
            
            // Validation
            if (!name || !description) {
                return res.status(400).render('courses/create', {
                    error: 'T√™n v√† m√¥ t·∫£ kh√≥a h·ªçc l√† b·∫Øt bu·ªôc',
                    data: req.body,
                    categories: ['programming', 'design', 'business', 'marketing', 'other'],
                    levels: ['beginner', 'intermediate', 'advanced']
                });
            }
            
            // T·∫°o kh√≥a h·ªçc m·ªõi
            const course = new Course({
                name,
                description,
                price: parseFloat(price) || 0,
                duration: parseInt(duration) || 0,
                category: category || 'other',
                level: level || 'beginner',
                instructor: instructor || 'Ch∆∞a c√≥'
            });
            
            await course.save();
            
            res.redirect('/courses');
        } catch (err) {
            console.error('‚ùå L·ªói t·∫°o kh√≥a h·ªçc:', err);
            res.status(500).render('courses/create', {
                error: 'L·ªói t·∫°o kh√≥a h·ªçc',
                data: req.body,
                categories: ['programming', 'design', 'business', 'marketing', 'other'],
                levels: ['beginner', 'intermediate', 'advanced']
            });
        }
    }

    // GET /courses/:id - Hi·ªÉn th·ªã chi ti·∫øt kh√≥a h·ªçc
    async show(req, res) {
        try {
            const courseDoc = await Course.findById(req.params.id).lean();
            
            if (!courseDoc) {
                return res.status(404).render('error', { 
                    message: 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i' 
                });
            }
            
            res.render('courses/show', { course: normalizeCourse(courseDoc) });
        } catch (err) {
            console.error('‚ùå L·ªói hi·ªÉn th·ªã chi ti·∫øt kh√≥a h·ªçc:', err);
            res.status(500).render('error', { 
                message: 'L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu',
                error: err.message 
            });
        }
    }

    // GET /courses/:id/edit - Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
    async edit(req, res) {
        try {
            // L·∫•y kho√° h·ªçc v√† chu·∫©n ho√° d·ªØ li·ªáu ƒë·ªÉ map ƒë√∫ng v√†o form
            const courseDoc = await Course.findById(req.params.id).lean();
            
            if (!courseDoc) {
                return res.status(404).render('error', { 
                    message: 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i' 
                });
            }
            
            res.render('courses/edit', {
                course: normalizeCourse(courseDoc),
                categories: ['programming', 'design', 'business', 'marketing', 'other'],
                levels: ['beginner', 'intermediate', 'advanced']
            });
        } catch (err) {
            console.error('‚ùå L·ªói hi·ªÉn th·ªã form ch·ªânh s·ª≠a:', err);
            res.status(500).render('error', { 
                message: 'L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu',
                error: err.message 
            });
        }
    }

    // PUT /courses/:id - C·∫≠p nh·∫≠t kh√≥a h·ªçc (c≈©ng x·ª≠ l√Ω POST v·ªõi _method=PUT)
    async update(req, res) {
        try {
            console.log('üìù Request method:', req.method);
            console.log('üìù Request body:', req.body);
            console.log('üìù Request params:', req.params);
            console.log('üìù Request query:', req.query);
            console.log(' Request headers:', req.headers);
            console.log('üìù Content-Type:', req.get('Content-Type'));
            console.log(' File upload:', req.file);
            
            // Ki·ªÉm tra req.body c√≥ t·ªìn t·∫°i kh√¥ng
            if (!req.body || Object.keys(req.body).length === 0) {
                console.error('‚ùå req.body is empty or undefined');
                
                return res.status(400).render('courses/edit', {
                    error: 'D·ªØ li·ªáu form kh√¥ng ƒë∆∞·ª£c g·ª≠i ƒë√∫ng c√°ch. Vui l√≤ng th·ª≠ l·∫°i. (req.body: ' + JSON.stringify(req.body) + ')',
                    course: { _id: req.params.id },
                    categories: ['programming', 'design', 'business', 'marketing', 'other'],
                    levels: ['beginner', 'intermediate', 'advanced']
                });
            }
            
            // X·ª≠ l√Ω c·∫£ schema c≈© v√† m·ªõi v·ªõi fallback an to√†n
            const name = req.body.name || req.body.name_courses || '';
            const description = req.body.description || req.body.catalogue || '';
            const price = req.body.price || req.body.price_courses || 0;
            const duration = req.body.duration || req.body.total_time || 0;
            const category = req.body.category || 'other';
            const level = req.body.level || 'beginner';
            const instructor = req.body.instructor || req.body.teacher || 'Ch∆∞a c√≥';
            const imageUrl = req.body.imageUrl || '';
            
            console.log('üìù Parsed data:', {
                name, description, price, duration, category, level, instructor, imageUrl
            });
            
            // Validation
            if (!name || !description) {
                return res.status(400).render('courses/edit', {
                    error: 'T√™n v√† m√¥ t·∫£ kh√≥a h·ªçc l√† b·∫Øt bu·ªôc',
                    course: { 
                        _id: req.params.id,
                        name: name,
                        description: description,
                        price: price,
                        duration: duration,
                        category: category,
                        level: level,
                        instructor: instructor
                    },
                    categories: ['programming', 'design', 'business', 'marketing', 'other'],
                    levels: ['beginner', 'intermediate', 'advanced']
                });
            }
            
            // X·ª≠ l√Ω gi√° ti·ªÅn - lo·∫°i b·ªè d·∫•u ph·∫©y v√† chuy·ªÉn v·ªÅ s·ªë
            let processedPrice = 0;
            if (price) {
                if (typeof price === 'string') {
                    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p "Mi·ªÖn ph√≠" => 0
                    if (price.toLowerCase().includes('mi·ªÖn ph√≠') || price.toLowerCase().includes('free')) {
                        processedPrice = 0;
                    } else {
                        processedPrice = parseInt(price.replace(/[^\d]/g, '')) || 0;
                    }
                } else {
                    processedPrice = parseInt(price) || 0;
                }
            }
            
            // X·ª≠ l√Ω th·ªùi l∆∞·ª£ng - chuy·ªÉn ƒë·ªïi t·ª´ format "27h32p" sang s·ªë gi·ªù
            let processedDuration = 0;
            if (duration) {
                if (typeof duration === 'string') {
                    // X·ª≠ l√Ω format "27h32p" ho·∫∑c "27h 32p"
                    const timeMatch = duration.match(/(\d+)h(?:\s*(\d+)p)?/i);
                    if (timeMatch) {
                        const hours = parseInt(timeMatch[1]) || 0;
                        const minutes = parseInt(timeMatch[2]) || 0;
                        processedDuration = hours + (minutes / 60);
                    } else {
                        processedDuration = parseFloat(duration) || 0;
                    }
                } else {
                    processedDuration = parseFloat(duration) || 0;
                }
            }
            
            // X·ª≠ l√Ω h√¨nh ·∫£nh
            let imageToUpdate = undefined;
            
            // N·∫øu c√≥ file upload
            if (req.file) {
                console.log('üìù File uploaded:', req.file);
                // T·∫°o URL cho file ƒë√£ upload
                imageToUpdate = `/uploads/${req.file.filename}`;
            } 
            // N·∫øu c√≥ URL h√¨nh ·∫£nh
            else if (imageUrl && imageUrl.trim() !== '') {
                imageToUpdate = imageUrl.trim();
            }
            
            const updateData = {
                // C·∫≠p nh·∫≠t c·∫£ schema c≈© v√† m·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
                name: name,
                name_courses: name, // Gi·ªØ l·∫°i schema c≈©
                description: description,
                catalogue: description, // Gi·ªØ l·∫°i schema c≈©
                price: processedPrice,
                price_courses: processedPrice, // Gi·ªØ l·∫°i schema c≈©
                duration: processedDuration,
                total_time: duration, // Gi·ªØ l·∫°i schema c≈©
                category: category,
                level: level,
                instructor: instructor,
                teacher: instructor, // Gi·ªØ l·∫°i schema c≈©
                updatedAt: Date.now()
            };
            
            // Ch·ªâ c·∫≠p nh·∫≠t h√¨nh ·∫£nh n·∫øu c√≥ thay ƒë·ªïi
            if (imageToUpdate !== undefined) {
                updateData.image = imageToUpdate;
            }
            
            console.log('üìù Update data:', updateData);
            
            const course = await Course.findByIdAndUpdate(
                req.params.id,
                updateData,
                { new: true, runValidators: true }
            );
            
            if (!course) {
                return res.status(404).render('error', { 
                    message: 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i' 
                });
            }
            
            console.log('‚úÖ C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng:', {
                id: course._id,
                name: course.name || course.name_courses,
                price: course.price || course.price_courses,
                duration: course.duration || course.total_time
            });
            
            // T·∫°o object course ƒë·ªÉ hi·ªÉn th·ªã trong form v·ªõi d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
            const displayCourse = {
                _id: course._id,
                name: course.name || course.name_courses || name,
                description: course.description || course.catalogue || description,
                price: course.price || course.price_courses || processedPrice,
                duration: course.duration || course.total_time || processedDuration,
                category: course.category || category,
                level: course.level || level,
                instructor: course.instructor || course.teacher || instructor,
                image: course.image || (imageToUpdate ? imageToUpdate : course.image)
            };
            
            // Thay v√¨ redirect, render l·∫°i trang edit v·ªõi th√¥ng b√°o th√†nh c√¥ng v√† d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
            res.render('courses/edit', {
                success: 'C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng! üéâ',
                course: displayCourse, // S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
                categories: ['programming', 'design', 'business', 'marketing', 'other'],
                levels: ['beginner', 'intermediate', 'advanced']
            });
            
        } catch (err) {
            console.error('‚ùå L·ªói c·∫≠p nh·∫≠t kh√≥a h·ªçc:', err);
            res.status(500).render('courses/edit', {
                error: 'L·ªói c·∫≠p nh·∫≠t kh√≥a h·ªçc: ' + err.message,
                course: { 
                    _id: req.params.id,
                    ...(req.body || {})
                },
                categories: ['programming', 'design', 'business', 'marketing', 'other'],
                levels: ['beginner', 'intermediate', 'advanced']
            });
        }
    }

    // DELETE /courses/:id - X√≥a kh√≥a h·ªçc
    async destroy(req, res) {
        try {
            const course = await Course.findByIdAndDelete(req.params.id);
            
            if (!course) {
                return res.status(404).json({ 
                    success: false,
                    message: 'Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i' 
                });
            }
            
            res.json({ 
                success: true,
                message: 'X√≥a kh√≥a h·ªçc th√†nh c√¥ng!' 
            });
        } catch (err) {
            console.error('‚ùå L·ªói x√≥a kh√≥a h·ªçc:', err);
            res.status(500).json({ 
                success: false,
                message: 'L·ªói x√≥a kh√≥a h·ªçc',
                error: err.message 
            });
        }
    }

    // GET /courses/search - T√¨m ki·∫øm kh√≥a h·ªçc (API)
    async search(req, res) {
        try {
            const { query, category, level, page = 1, limit = 10 } = req.query;
            const skip = (page - 1) * limit;
            
            let filter = { isActive: true };
            
            if (query) {
                filter.name = { $regex: query, $options: 'i' };
            }
            
            if (category && category !== 'all') {
                filter.category = category;
            }
            
            if (level && level !== 'all') {
                filter.level = level;
            }
            
            const raw = await Course.find(filter)
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(parseInt(limit))
                .lean();
            const courses = raw.map(normalizeCourse);
            
            const total = await Course.countDocuments(filter);
            
            res.json({
                success: true,
                data: courses,
                total,
                currentPage: parseInt(page),
                totalPages: Math.ceil(total / limit)
            });
        } catch (err) {
            console.error('‚ùå L·ªói t√¨m ki·∫øm kh√≥a h·ªçc:', err);
            res.status(500).json({ 
                success: false,
                error: 'L·ªói t√¨m ki·∫øm',
                message: err.message 
            });
        }
    }
}

module.exports = new CourseController();
